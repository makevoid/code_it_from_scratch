
---


h4. cuuuustooooom foooormaaats!!!


- Textile/Markdown + extensions 

[like github flavored markdown, they're just pre/post parsers] 


_my 2 cents:_

- "SAF - Simple Articles Format":https://github.com/makevoid/saf

---

textile/markdown are meant to be used in static, easily editable files

many blogging engines like jekyll or static sites generator use markdown/textile

if you are building a cms or you let user input some content prefer those over WYSIWIG editors (like TinyMCE)

---

```html
[image_ID] -> <img src="./path/to/imgs/ID.png" />
[audio_ID] -> <audio src="./path/to/audios/ID.mp3"></audio>

[youtube_ID] -> <object>youtube embed ID...</object>
[vimeo_ID] -> <object>vimeo embed ID...</object>

[....] -> 
```

simple regexes

```ruby
/\[youtube_(.+)\]/

/\[image_(\d+)\]/
```

use ruby match / gsub

---


---

commit messages: 

be creative! implemented x because it's awesome
fixing again, it's the 100th time, i think it's time to change y

---


```ruby
class App < Sinatra::Base
  get "/url" do
    # ...
  end
end
```


---

h1. _

*underscore.js* is very cool because it adds to js a lot of useful functions that make it more like ruby!

*Array* [Enumberables] (each, map, count, sum ...)
String (...)
Function (throttle, once...)



BUT: dont use it like shown in the examples :D

---

```javascript
_([array]).map, function(){
  // ...
})
```

not

```javascript
_.map([array], function(){
  // ...  
})
```

:)

because so you can refactor as

```javascript
var array = _([array])
```

---

and you can do

```javascript
array.map(function(){
  // ...
})
```

---

and you can do

```javascript
array.map(function(elem, idx){
  // ...
})
```

---

and you can do

```javascript
array.map(function(elem, idx){
  // ...
})
```

it feels more like ruby!

---

a complete area of your brain makes analysis, your prefrontal cortex, then you have a creative part, located on the back sides of your head  

there is a cost in switching between analytic and creative (intuition) mode, you should should maximize the two phases, I think

so, again, code it from the fucking scratch


---   
  
in JS don't use ; they are optional! 

except when you use the wrapping namespace:

```javascript
(function(){ });
```

make JS easier to read/write

if you really have to, use zepto instead of jquery - if you don't plan to support IE8, especially on mobile devices

--- 

a bit basic


h1. ruby



use net http from scratch
[example]

```ruby
example = Net::HTTP.get_response "http://example.com"
puts example #=> "example!"
```

> CAN SKIP THIS

> always run it and see the output!

---

```ruby
def get_example
  Net::HTTP.get_response "http://example.com"
end

get_example()
```

---


in a class:


```ruby
class Antani
  # long list of methods

  def get_example
    Net::HTTP.get_response "http://example.com"
  end

  def parse_example
    example = get_example
    example.gsub(/example/, 'EXAMPLE') 
  end
end
```


---

or:

```ruby
class Antani
  # long list of methods

  def get_example
    @example = Net::HTTP.get_response "http://example.com"
  end

  def parse_example
     @example.gsub(/example/, 'EXAMPLE') 
  end
end
```

---

```ruby
class Antani

  include Example


module Example

  def get_example
    # ...

  def parse example
    # ....
```

(pseudo code)
-----

a bit basic ENDS



---

[parallel but not the best fit]
fits more on a talk on: bootstrap your own product

gaming: Ultima Online, you start naked, no money

you have to eat or you'll die

can cultivate plants/ hunt for food

can beg money
can craft weapons / armors
mine rocks
cultivate plants
harvest wood
woodcraft
make fences and houses
hunt
fight


npcs / monsters / other players





lesson: you can create things based on your skills and make a living out of it

self: you can't spend anything, you can't


---

example:

rubyJS vs opalrb (sorry xxx)

not compiled - see video: http://www.ustream.tv/recorded/33526011

21kb gzipped

very precise mad man (not just the average programmer)

---

machine setup: (for your next machine / test deviece / designer machine / coworker ones [especially for remote coworkers])

should be fast
scripted / you have notes / you remember it well

don't use remote machines or vms to check (these are ok for production), this (at least in the cases i saw) slows down your development process

---

// so again, do it from scratch people!!



// especially if it's your boss paying for your code time!

// use the fucking time to learn! and not to learn to use a library well, but to build something simple and useful where it's needed

// i'm not saying NO to every libs, I just say

// think about it.... this part is better coded from scratch!!

---


As long as you work for a client / company, your first target after delivering stuff should be of improving yourself


You should build a site/app
  that you love
  that you need
  that you use

so the testing and improving phase is free! :D

---

fast development feedback loop


Don't use VMs

build a script that setups the environment


don't use chef
a sh script is better for starting

there's really not a good default for everything 
your custom configs can be better
an sh/ruby script is easier to edit that anything else
(if you structure it well)

---


for sysadmin i suggested the sh way to some programmer friends, i showed them a bit of setup code and told them to share their, and it worked very well 

---



hack CSS, create your own Sass mixins:

> SKIP to layouts

```css
=box_sizing
  -moz-box-sizing: border-box
  box-sizing: border-box

=box
 +box_sizing
 float: left

// you can go really crazy with that

=left
  float: left
  
=right
  float: right
  
=center
  margin: 0 auto
    
=center_text
  text-align: center
```
  
---  
  
center with IE support 

```css  
=center
  margin: 0 auto
  text-align: center
  *
    text-align: center
```

---

```css
=hidden
  display: none

=bg($bg) // why bg? because background is too long/hard to type ^^
  background: $bg

=rounded($amount)
  +border_radius($amount)
  
=vmargin($top, $bot: $top)
  margin-top: $top
  margin-bottom: $bot
  
// hmargin, vpadding, hpadding
```

---

and of course, use them

```css
.example
  +right()
  +rounded(8px)
  +vmargin(5px)
  +hpadding(10px)
```

simplify css and enhance it

---

---

> skip this part!!! the important list is after this!

> awesome for open source


> remember when you started with building web sites/apps (and what you do mostly do to evaluate them?)

you open the site/app and click around, play with it
and next,  yes -> View source

---

[and that is exactly what makes me mad about not being able to do it on desktop/mobile(ios/android) apps]

that's why i love web technologies (html5/js etc) and even if we have a big elder brother that is very slow (yeah i'm talking about W3C)

--- 

I like standards, especially if they're easy, to give the possibility to anyone to create things, and maybe become more of a programmer or designer

we have the ability to make, it's inside our human nature, we can make things that can change the world!!!

---

note:

if you use compilers (especially html and css) make sure they output a good code
or make your sources public (repository/put them in the same public directory and "link" to them with a comment <!-- --> // ) 


---

I've gone / I'm pushing it  to the extreme just to see when it's useful and when it's not

see where is your limit

try to go beyond that and to see if you benefit from it


to see wich library/technology to try and how to try it

search the library author name
find a talk about his library
---

Sometimes it's not easy

Especially with big "in production" projects


i'm not saying it's easy, especially with a big and "already running in production" project, but! you surely have another 

so, before you add x^n dependencies, consider to code it from a blank environment

---

h2. models / DDD


> ruby part:

> models: stated before



---

there are a lot of functions in stdlib, use them!


---

h1. icons

&#x1F30D; hello world

&#9200;
&#9203;
&#9995; stop
&#9989; check

&#10024; magic
&#x1F52E;

&#10060; cross

&#11088; star

&#x1F680; rocket

rails
&#x1F682;
&#x1F683;
&#x1F684;

&#x1F3A9; magic

&#x1F3AF; target

&#x1F3B2; dice

&#x1F37A; beer

&#x1F6A6; traffic light

&#x1F6B6; walk 

&#x1F6BD; wc

&#x1F64B; questions

&#x1F648;
&#x1F64A;
&#x1F649;

&#x1F446; pregunta

&#x1F449; point right
&#x1F448; point left

&#x1F44C; perfect
&#x1F44D; thumbs up
&#x1F44E; thumbs down
&#x1F453; nerd

&#x1F47D; alien

&#x1F48A; pill

&#x1F4A3; bomb

&#x1F4AA; flex

&#x1F4A9; poo

&#x1F4B0; profit
&#x1F4C8;

&#x1F4C9; chart down

&#x1F4CC; pushpin
&#x1F4D4; notebook
&#x1F4DD;

&#x1F514; bell

&#x1F512; security
&#x1F513; open

&#x1F525; fire

&#x1F600; happy
&#x1F605; sweat
&#x1F613; sweat sad

&#x1F60E; sunglasses

&#x1F620; angry
&#x1F628; fear
&#x1F631; more fear

&#x1F3C1; finish

&#x1F3E0; home

&#x1F422; turtle
&#x1F407; rabbit
&#x1F40E; horse

&#x1F19A; VS

http://www.utf8-chartable.de/unicode-utf8-table.pl?start=128512&number=1024&utf8=-&unicodeinhtml=hex

