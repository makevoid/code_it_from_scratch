
h1. Code it from scratch

<br><br><br><br>

_RubyDay 2013_

*@makevoid*

> notes:

>  create wifi, connect ipad and test buttons/notes

> deactivate moz fb plugin, put in fullscreen, open display preferences, close every other software, open quicktime and start recording (file 

> new screen recording)

> 1200x900

---


who am I?

@makevoid

Ruby developer

Recently discovered 3D printing!

> Lately I'm becoming interested in 3d printing (code that become real things), but I'm a newbie, so If you know a lot about that, come and talk to me 

---

IDEA &#128161;


> you have an idea for an app

> you want to start to code it

> how many times the first thing you have done is this?

---


```bash
$ rails new appname
```

> and maybe it was only for a static site, for a json API, or for a clientside app?

> maybe you have seen the rails build blog in 15 minutes screencast a lot of times

> have you thought, maybe it's not the best or the fastest to start an app, or start playing with some code

> or... have you ever seen this?

> } terminal

---

have you ever seen this in rails?

```bash
$ rake test
```

> [terminal]

---

```bash
$ rake test
..
```

> [terminal]
---

```bash
$ rake test
.....
```

> [terminal]
---

```bash
$ rake test
.........
```

> [terminal]
---

```bash
$ rake test
...............
```


> or maybe you started a fresh app:

> [terminal]
---

or maybe this:

_(freshly created app)_

```bash
$ rails console
```

...after 2 secs

```bash
irb(main):001:0>
```

---

... after adding 10+ gems ...

---

```bash
$ rails console
```

---

```bash
$ rails console
```

(...)

> rails console yuuuhuu

---

```bash
$ rails console
```

... after 15 secs ...

```bash
irb(main):001:0>
```

---

```bash
$ rails console
```

... after 15 secs ...

```bash
irb(main):001:0>
```

WTF!!!

---

for the next project consider:

---

for the next project consider:

h3. coding it from scratch!

---

for the next project consider:

h3. coding it from scratch!

_there will be some slides with code and links_

_you may follow along here:_

h1. "cifs.mkvd.net":http://cifs.mkvd.net


---

START small in:

> start both from only basic ruby 

> or/and from the frontend, yes, i'm talking about a plain html file

> at first do only the things you need the most, your app's core

> only after consider integrating other's people code and libraries

---

START small in:

---

h2. - Ruby

---

h2. - Ruby

h2. - HTML/CSS

---

h2. - Ruby

h2. - HTML/CSS

h2. - JS

> this is only a 30min talk, I can't show you all the things but some examples of very small small starting points and going on after that


---

Some examples: 

h3. Ruby:

h1. &#x1F4DD;

> in ruby:

> let's say you want to build a Blog, you will need a post model


---


Don't &#9995;

```bash
$ rails new myapp
```

---

/ prefer something more like 

h2. sinatra

---

> don't do this:

and even in sinatra:

&#9995;

```ruby
class Post < ActiveRecord::Base

end
```

> the moment you do that your code is not small anymore!


---

- start from sinatra 

- transition into rails if you need

( you can always mount a rack app [like sinatra] 
in the rails router - so SOA! )

> service oriented architecture


---

```ruby
class Post
  # uuh... plain ruby
end
```


---

```ruby
class Post
  # can't you hear the sound of freedom?
end
```

---

...

> ok, what I'm going to show you it's really basic, but bare with me


---



```ruby
class Post
  attr_accessor :title
  attr_accessor :content
  
  def initialize(attrs={})
    @title    = attrs[:title]
    @content  = attrs[:content]
  end
end
```

---

```ruby
post = Post.new( title: "ruby", 
  content: "when it's plain, it's powerful" )
post.title #=> "ruby"
```

> this may seem too basic, but believe me, it's convenient!

> and you can easily go beyond that!

> NEXT: for a model library:

---

datas == array of hashes

---

```bash
people = [person1, person2]
```

---

```bash
people = [{ #person1
          }, 
          { #person2
          }] 
```

--- 

in ruby:

```ruby
[
  { name: "mario", age: 28 }, 
  { name: "luigi", age: 32 },
  # ...   
]
```

--- 

or in json (.to_json is your friend):

```javascript
[
  { "name": "mario", "age": 28 }, 
  { "name": "luigi", "age": 32 }
  // ...
]
```

---

you can use eval (it's evil only in production, in development can be time saving)

```ruby
def load_posts(user_id)
  { # ... }
end

[
  { id: 1, name: "mario", age: 28, 
    posts: load_posts(1) 
  }
].sort_by{ #... }
```

when developing, write your data in a file, so you don't need to query a database, you can just open that file


---

load them into objects

```ruby
@posts = posts.map do |post|
  Post.new( title: post.title, 
  content: post.content )
end
```
  
  
--- 

when developing

do you really need persistence?


> when developing, do you really need persistence? most of the time not! you need datas that persist in memory

---

what is "in memory" in ruby??

---

what is "in memory"  in ruby??

(a "variable"!)

---

what is "in memory"  in ruby??

a *@@class_variable*!

---

what is "in memory" in ruby??

a *@@class_variable*!

a *CONSTANT*!

---

what you need:

---

what you need:

h3. good seed datas

> most of the times

> you need just good seed datas


---

h2. scale later

> you can always scale later to a more production-ready solution, but your development time and process is the key

---

h3. data is code, code is data

---


h3. read file > eval contents > data!


```ruby
data = File.read "./db/data.rb"
objects = eval data

puts objects #=> [{}, {}]
```

> ..and you can simply retrieve them with an eval (of course you can use yaml/json/redis/pstore if you prefer)


---

h3. data > write to file

```ruby
objects = [{ }, { }]

File.open("./db/data.rb", "w") do |f|
  f.write objects.to_s
end
```

> your collection of objects can be easily wrote to file


---

h5. load your datas into your program

<br><br>

h3. make them objects!

---

you can dynamically load datas and modify your objects
   

*attr_accessor* 

*instance_variable_set* 

are your friends!


---

```ruby
# for every key in your hash
key = :antani
val = "sblinda"
instance_variable_set "@#{key}", val

# and to access them easily
attr_accessor key
# (need to do it at class level)
```

---


```ruby
# how to get to class level?

def self.included(mod)
  mod.send :extend, ClassMethods
end

module ClassMethods
  def create_accessors(hash)
    attr_accessor *hash.keys
  end
end
```

---

without method missing

without instance/class eval

<br>

those are cool but:

*not very clear to document/debug*, isn't it?

---

```ruby
class Page
  
  # ...
  
  def load(hash)
    Page.create_accessors hash
    load_contents hash
  end

  private

  def load_contents(hash)
    hash.map do |key, val|
      instance_variable_set "@#{key}", val
    end
  end
  
end
```

---

available as a library: "github/makevoid/blizz":https://github.com/makevoid/blizz

but as the code it's simple

I suggest coding it yourself personalizing it :) 

---


then of course you can use it


```ruby
hash = { title: "test", contents: "bla" }
page = Page.load hash

# accessors are created for you
page.title #=> "test"
page.contents #=> "bla"
```    
    
---    
    
> test
    
with nested embedded objects:

```ruby
post_hash = { 
  title: "test", 
  comments: ["bla", "asd", "lol"] 
}
```
    
(simple)

---

more complex:

```ruby
post_hash = { 
  title: "test", 
  comments: [
    { id: 1, text: "bla", user_id: 1 },
    { id: 2, text: "asd", user_id: 2 },
    { id: 3, text: "lol", user_id: 1 },
    #...
  ]
}
```


go crazy and find your own way!

---

then you want to use activerecord? easy, your external api looks already like that!

  
---
  
  
or use ActiveModel?
or "YAML::Store":http://www.ruby-doc.org/stdlib-2.0/libdoc/yaml/rdoc/YAML/Store.html / "PStore":http://www.ruby-doc.org/stdlib-2.0/libdoc/pstore/rdoc/PStore.html (both in stdlib),
"Virtus":https://github.com/solnic/virtus (made for "DataMapper2, now ROM":http://rom-rb.org/),
or "ActiveRecord without Rails":http://blog.aizatto.com/2007/05/21/activerecord-without-rails/,
or "DataMapper":http://datamapper.org (v1)


> next: autoload 


---

when you don't have rails

you don't have autoload / autoreload

---

the fact is you don't need autoload

simply use require + Dir.glob

```ruby
def require_all(dir)
  Dir.glob("#{dir}/*.rb").each do |file|
    require file
  end
end

require_all "models"
```

---

then in your models, if some model requires another you have to manually require them


```ruby
require_relative "a"

model B
  def foo
    A.bar
  end
end
```


---

autoreload

- ctrl C, &uarr; up arrow, &#8629; return &#x1F600;

- "Rerun":https://github.com/alexch/rerun

- "guard-relaunch":https://github.com/makevoid/guard-relaunch

> if your [dev env/setup] is slow, you are developing at turtle speed &#x1F422;

> your integration tests will be automatically slow because they will require your environment


> hotkeys

> - fastscripts (osx)

> - gnome-???? forgot the name


---

> SKIP IT?

use pseudo-code

use pseudo-code

use pseudo-code

use pseudo-code

use pseudo-code


write pseudo code, then implement it in real language

---

email_my_ip.rb

```ruby
# gets my ip and emails it to me
```

---

email_my_ip.rb

```ruby
# get my ip from icanhazip.com
# emails it to me@example.com
```

---


email_my_ip.rb


```ruby
def email_ip
  # get my ip from icanhazip.com
  # emails it to me@example.com
end

email_ip
```

> create main method and call it

---

```ruby
def email_ip
  ip = get_ip
  mail_me_ip ip
end

def get_ip
end

def mail_me_ip(ip)
end

email_ip
```

> create actual methods


---

```ruby
require 'net/http'

def get_ip
  Net:HTTP.get_response "http://icanhazip.com"
end

def mail_me_ip(ip)
  # ...
end
```

etc...

> implement them 

---

h1. Env file

think about having an env file

---


h4. Env file

] put in it all your dependencies and models requirements

*env.rb* - ex. with bundler:

```ruby
require 'bundler/setup'
Bundler.require :default

# require your models

# load seeds here
# and/or connect to your db(s)
```


---

so in your *app.rb* you can do:

```ruby
require './env'
```

and have your gems, models, etc. loaded

---

h4. plus

that way you can do:

```bash
irb -r ./env.rb
```

and have your environment loaded (like rails console)


---

```bash
$ irb -r ./env.rb
> 
```

---

```bash
$ irb -r ./env.rb
> Model.all #=> [{...}, {...}] 
```

---

h3. How to require

look at different requiring mechanisms

```ruby
require "file" # standard for gems
require "./file" 
require_relative "file"
```

otherwise:
append to *$LOAD_PATH*
_(I don't suggest this approach)_


---

my favourite:

```ruby
path = File.expand_path "../", __FILE__
require "#{path}/file"
```

---

main app class:

```ruby
class App
  @@path = File.expand_path "../", __FILE__
  
  def self.path
    @@path
  end
end
```

then you can call *App.path* like *Rails.root*

_(where there's "../" you will put your root project dir level)_

---

example: 

```bash
app dir /
  |
  -- app.rb
  -- ..
```

the path will be "../"

---

```bash
app dir /
  |
  -- lib/
      |
      -- app.rb
      -- ..
  -- ..
```

the path will be "../../", etc...


next....

---

h1. HTML / CSS (& Sass)

CSS resets


---

h1. HTML / CSS (& Sass)

CSS resets

don't use Compass or HTML5 boilerplates 

reset what you care about!

---

h1. HTML / CSS (& Sass)

CSS resets

don't use Compass or HTML5 boilerplates 

reset what you care about!

"Compass":http://compass-style.org/ > "Bourbon":http://bourbon.io/ > *custom mixins*

> if you use *Compass* drop to *Bourbon* then drop to custom mixins 

finalize when you have to ship it, don't overoptimize prematurely!

---

my favourite css reset:

```css
// right, just that

body {
  margin: 0;
}
```

---

// and if you use links

```css
a {
  text-decoration: none;
  color: /* choose a color! */
}
```

---

```css
// support IE

img {
  border: 0
}
```

---

&#x1F44D;

do layouts by yourself

don't use css frameworks / grid systems / boilerplates

---

use *box-sizing* for layouts

```css
box-sizing: border-box
```

it allows you to think about the content width without too many calculations
you can mix fluid (%/em) widths and fixed paddings (in px) 

_your playground it's always ready!_

---

```html
// index.html

<style>
  div {
    box-sizing: border-box
  }
</style>

<div>this is a valid html page</div>
```

> of course later you may want to add html and body tags

---

box-sizing example:

```html
<style>
  body {
    margin: 0;
  }

  div {
    box-sizing: border-box;
    float: left;
    width: 50%;
    padding: 20px;
    background: lightGrey; // to show them
  }
</style>

<div>a div</div>
<div>another div</div>
```

---

without horizontal padding

<div class="layout_example1">a div</div>
<div class="layout_example1">another div</div>

---

with a bit of padding

<div class="layout_example2">a div</div>
<div class="layout_example2">another div</div>

---

more padding, width remains 50%

<div class="layout_example3">a div</div>
<div class="layout_example3">another div</div>

---

note: needs to be prefixed in FF

```javascript
-moz-box-sizing: border-box;
```

works only in IE8+


---

h2. Sass, hands on:

_(less is very similar though)_

> you can use Sass to write prefixed css


---


use Sass/Less/etc variables and operations:

for layout:

```sass
# Sass example

$main: 80%
$side: 16%
$edges: $main - $side*2 // 2%
```

!/imgs/sass_layout.jpg!

---

colors!

```css
body
  background: #EEE  // light grey 

a
  color: #C00       // red
```

<div class="colors1">
  <a href="#">link</a>
</div>

---

extract the colors you use into variables:

```css
$main_color: #C00
$bg_color: #EEE

body
  background: $bg_color
  
a
  color: $main_color  
```

<div class="colors1">
  <a href="#">link</a>
</div>


---

```css
a
  color: $main_color
a:hover
  color: $main_color + #222 
  // makes the links brigher on hover
  
.content
  background: $bg_color - #222 
  // makes it darker
```

<div class="colors1">
  <a href="#">link</a>
</div>
<div class="colors2">
  &nbsp;
</div>
<div class="colors1">
  &nbsp;  
</div>

---


```css
$main_color: #0A0  // green
$bg_color: #EFE    // light green
```


<div class="colors3">
  <a href="#">link</a>
</div>
<div class="colors4">
  &nbsp;
</div>
<div class="colors3">
  &nbsp;  
</div>

> and if you change the variables, you change the colors! here's your theme generator

---

there are many more color functions like

```css
darken()
lighten()
adjust_hue()
colorize()
grayscale()
alpha()
...
```

"more":http://sass-lang.com/docs/yardoc/Sass/Script/Functions.html


---

Ruby developers
focus *a lot* on backends
focus *too few on frontend* 

we forget that: 

h3. html/css is also programming!

_especially when css preprocessors are involved_

---

Do it yourself, you'll save time in the end:

- Sinatra over Rails
- Sass over Compass
- plain JS over JQuery and plugins

If you code something, from the ground up, you are sure that you do it based on what you need.

But! It will take more time at the begining &#x1F600;

---

h1. JS

build your own:
  - click events
  - image gallery
  - autocomplete
  - infinite page scrolling
  - manage history state (push/pop)State yourself
  - don't use pjax / turbolinks!
  -- _do ajax call yourself, use history api, so you can use it for the content part_

---

click event example:

```javascript
// with jquery/zepto

$("a.clickable").on("click", function(evt){
  console.log("clicked")
  evt.preventDefault()
})
```

---

```javascript
// that becomes:

var link = $("a.clickable")
link.on("click", function(evt){
  console.log("clicked")
  evt.preventDefault()
})
```

---

```javascript
// and finally:

var link = $("a.clickable")
var handle_click = function(evt){
  console.log("clicked")
  evt.preventDefault()
}
link.on("click", handle_click)
```

---

```javascript
// plain js

var link = document.querySelector("a.clickable")
var handle_click = function(evt){
  console.log("clicked")
  evt.preventDefault()
}
link.addEventListener("onclick", handle_click)
```

not that hard isn't it?

---


querySelector

```javascript
img = document.querySelector("img.antani")

Q = document.querySelector
( QA = document.querySelectorAll )
$ = document.querySelector
```

---

```javascript
img = $("img.antani")
img = Q("img.antani") 
```

tip: use specific tags in your js (especially if a specific tag like an img/audio/video/section/span/caption...)


otherwise you always have to do get(0) to get to the real element


---


data attributes

```javascript
// jquery
img.data("id")
```

---

```javascript
// wouldn't be better if it was
img.data.id  // ?
```

---

```javascript
// well in js is really like this
img.dataSet.id
```

> hmmm :D


---

also for classes (*addClass/removeClass*)

and for appending/prepending to the dom:
*innerHTML += / insertBefore / appendElement*

> // prototyping // dealing with change // "lean" // "agile" // insert buzzword here! // from a fucking blank editor!  you know?  


"see other examples":http://www.leebrimelow.com/native-methods-jquery/


---

h4. make your code easy to read


---

h4. make your code easy to read 

(in the frontend world) 
this means also: 

h4. make your html/css easy to read

if it's small and modular, it will be easier


---

prefer:

- rails router over controllers
 - sinatra over rails
  - mount rack apps directly on router

- catchall controller

- APIs

for controllers that manage APIs, there's no need for full ActionController 

_more metal &#127928; , more speed! &#x1F40E;_

 
--- 
 
h3. view

- pagination
- form helpers (basic version is easy, validation integration can be tricky, especially with i18n)
- link helpers
- meta tags
- js/css includes
- HAML/Slim
-- partials over view helpers

---

h2. use Guard

_or similar_  


---

h3. Guard for 

h3. workflow automation

---

h3. Guard for 

- compiling ( sass/less -> css,  coffee -> js )
- browser reloading
- concatenating
- minifying
(sprockets is slow isn't it? use guard [show guard-concat code])
  
---

use guard
to automate your workflow / coding sessions

"guard-coffeescript":https://github.com/guard/guard-coffeescript
"guard-sass":https://github.com/hawx/guard-sass
"guard-livereload":https://github.com/guard/guard-livereload (+ "browser plugin":https://chrome.google.com/webstore/detail/livereload/jnihajbhpnppcggbcgedagnkighmdlei?hl=en)
"guard-concat":https://github.com/makevoid/guard-concat
"guard-relaunch":https://github.com/makevoid/guard-relaunch

["more":https://github.com/guard]
  
---  
  
h2. Testing

- test model in isolation, require only what you need (multiple spec_helpers)
- sinatra over rails (blazing fast integration testing)
- custom/in memory/redis/datamapper/sequel over activerecord

---


for sites / clientside apps

start with an empty index.html

open it in your browser

when you need to host it use something like

```bash
python -m SimpleHTTPServer 3000
```

---

then maybe move to sinatra 

then maybe move to rails (the total code weight will increase drastically in this phase &#x1F600; )

> it starts a server that hosts your static files

--- 

then tear down some defaults 

(you usually don't need all actioncontroller 

also see these "single file":http://rkistner.github.io/ruby/2013/05/03/single-file-rails/ "rails app":https://gist.github.com/josevalim/1942658 and one file rails app and this talk by "Jose Valim":http://www.confreaks.com/videos/2442-railsconf2013-you-ve-got-a-sinatra-on-your-rails  )

---

when choosing a library, these things are important:

- size (number of lines) 

- code quality

- test coverage

- require time (most people ignore it, but this impacts both development and testing time)


---

h1. CIY (Code it Yourself)

---

h1. CIY

like DIY for things, if it's cheaper
in the end you will learn something new
or if you already know those things (let's say you need a pagination library) you can do it for exercise
to try a new TDD/BDD/etc way of coding
to train yourself

---

don't rebuild everything! &#9995;

so don't rebuild rails if you need every part of it

use it! 

---

but...

If you code something, and you see it's 

- simpler 

- solves the problem better 

- it has a feature that other libs don't 

- has a better API

*release that code!*

---

- reuse it in other projects
- let other people use it, open source it
-- if people ask for features
-- tell people to fork it and implement those themselves

---

Sometimes it's not easy...

---

but!

---

Coding from scratch keep your programmer memory fresh

less cut n paste

you need to produce:
- more modular code
- more targeted code


---

prefer small iterations over big upfront overstructured designs

follow the *"flow"*


---

I was a bit extreme, but that was the title of my talk

use existing *gems and libraries* some of them are really cool!

---

h2. Thanks!

---

h3. Thanks!

<br><br><br>

h1. Questions?
