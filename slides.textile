
h1. Code it from scratch

RubyDay 2013

@makevoid

> notes: create wifi, connect ipad and test

---


who am I?

@makevoid

Ruby developer

I (heart) 3D printing

> Lately I'm becoming interested in 3d printing (code that become real things), but I'm a newbie, so If you know a lot about that, come and talk to me


---

IDEA &#128161;


> you have an idea for an app
> you want to start to code it

> how many times the first thing you have done is this?

---


rails new appname

> and maybe it was only for a static site, for a json API, or for a clientside app?

> or... have you ever seen this?

[bg black]
[colour green]

---

$ rake test

[bg black]
[colour green]
---

$ rake test
.|.|.|.|.|.|.|.|.....
(js animation)

[bg black]
[colour green]

> or maybe this:

---

(freshly created app)

$ rails console

after 2 secs

irb(main):001:0>


---

after adding 10+ gems

$ rails console

..... 15 secs ...

irb(main):001:0>


---

blank slide

> have you ever saw something like that? if yes

> for the next app think about...

---

Coding it from scratch!

---

problems:

- library you require and their dependencies are code that you don't control directly
- it can be complex
- buggy
- slow 
- ...

---

solution:

go back to ruby

> start both from only basic ruby 
> or/and from the frontend, yes, i'm talking about a plain html file

> at first do only the things you need the most, your app's core

> only after consider integrating other's people code and libraries 

---

- start small in:

- ruby
- css
- js

> this is only a 30min talk, I can't show you everything but some of the benefits of starting small and going on


---

...

---



---

&#x1F4DD;

> in ruby:

> let's say you want to build a Blog, you will need a post model


---

&#9995;

> don't do this:

class Post < ActiveRecord::Base

end

> the moment you do that your code is not small anymore!

---

class Post
  # uuh... plain ruby
end


---


class Post
  attr_accessor :title
  attr_accessor :content
  
  def initialize(attrs={})
    @title    = attrs[:title]
    @content  = attrs[:content]
  end
end

post = Post.new title: "ruby", content: "when it's plain, it's powerful"
post.title #=> "ruby"

> this may seem too basic, but believe me, it's convenient!
> and you can easily go beyond that!


> for a model library:

datas == array of hashes

---

people = [person1, person2]

---

people = [{ #person1
          }, 
          { #person2
          }] 

--- 

# in ruby

[
  { name: "mario", age: 28 }, 
  { name: "luigi", age: 32 },   
]

--- 

// or in json

[
  { "name": "mario", "age": 28 }, 
  { "name": "luigi", "age": 32 }
]

you can use eval (it's evil only in production, in development can be time saving)

[
  { id: 1, name: "mario", age: 28, posts: load_posts(1) }
].sort_by{ #... }

when developing, write your data in a file, so you don't need to query a database, you can just open that file

--- 

when developing

do you really need persistence?


> when developing, do you really need persistence? most of the time not! you need datas that persist in memory

---

good seeds

> most of the times
> you need good seed datas


---

scale later

> you can always scale later

---

data is code, code is data

data > write to file

read file > eval contents > data!


---


it's easy to dynamically load datas and modify your objects

---

  key = :antani
  instance_variable_set "@#{key}", val

  # at class level
  attr_accessor key


  # how to get to class level?
  
  def self.included(mod)
    mod.send :extend, ClassMethods
  end

  module ClassMethods
    def create_accessor(name)
      attr_accessor name
    end
  end


without method missing
without instance/class eval

[those are not very clear, isn't it?]


--

then of course you can use it

    hash = { title: "test", contents: "bla" }
    page = Page.load hash
    
    page.title #=> "test"
    page.contents #=> "bla"
    
    
    
with relations:

first embed:

    post_hash = { title: "test", comments: ["bla", "asd", "lol"] }
    
(simple)

more complex:

  post_hash = { 
    title: "test", 
    comments: [
      { id: 1, text: "bla", user_id: 1 },
      { id: 2, text: "asd", user_id: 2 },
      { id: 3, text: "lol", user_id: 1 },
      #...
    ]
  }



go crazy and find your own way!

---

then you want to use activerecord? easy, your external api looks already like that!

  
---
  
or use ActiveModel?/ YAML::Store / PStore (stdlib) /Virtus (datamapper2/ROM)

-------

ruby

use net http from scratch
[example]

example = Net::HTTP.get_response "http://example.com"
puts example #=> "example!"

> always run it and see the output!

---

def get_example
  Net::HTTP.get_response "http://example.com"
end

get_example()

----


in a class

class Antani
  # long list of methods

	def get_example
		Net::HTTP.get_response "http://example.com"
	end

  def parse_example
    example = get_example
    example.gsub(/example/, 'EXAMPLE') 
  end


-- or ---

class Antani
	# long list of methods

        
	def get_example
    @example = Net::HTTP.get_response "http://example.com"
	end

  def parse_example
     @example.gsub(/example/, 'EXAMPLE') 
  end

-----

class Antani

	include Example


module Example

	def get_example
             ...

        def parse example
             ....

--------

when you don't have rails

you don't have autoload / autoreload

-------

autoload: -> require + Dir.glob

def require_all(dir)
  Dir.glob("#{dir}/*.rb").each do |file|
    require file

--------

autoreload

ctrl+C 

rerun

guard-reload

> if your [test env/setup] is slow, you are developing at turtle speed &#x1F422;


hotkeys (osx / linux)


-------------

use pseudo-code

use pseudo-code

use pseudo-code

use pseudo-code

use pseudo-code


write pseudo code, then implement it in real language

---

email_my_ip.rb

# gets my ip and emails it to me

---

email_my_ip.rb

# get my ip from icanhazip.com
# emails it to me@example.com


---


email_my_ip.rb

def email_ip
  # get my ip from icanhazip.com
  # emails it to me@example.com
end

email_ip

> create main method and call it

---

def email_ip
  ip = get_ip
  mail_me_ip ip
end

def get_ip
end

def mail_me_ip(ip)
end

email_ip

> create actual methods


---

require 'net/http'

def get_ip
  
end

> implement them 

---

> ruby part:

- models / DDD

> models: stated before

---

- router/controllers
 - sinatra over rails
 - router over controller 
  - mount rack apps directly on router
 - catchall controller
 - api controller / no need for full ActionController (yeah, more metal &#127928; &#9835; , more speed)

---

- APIs
 
--- 
 
- view
  - pagination
  - form helpers (basic version is easy, validation integration can be tricky, especially with i18n)
  - link helpers
  - meta tags
  - js/css includes
  - HAML/Slim

---
  
- workflow automation (guard)
  - compiling ( sass/less -> css,  coffee -> js )
  - browser reloading
  - concatenating
  - minifying
  (sprockets is slow isn't it? use guard [show guard-concat code])
  
---  
  
- testing
  - test model in isolation, require only what you need (multiple spec helpers)
  - sinatra over rails (blazing fast integration testing)
  - custom/in memory/redis/datamapper/sequel over activerecord

---


for sites / clientside apps

start with an empty index.html

open it in your browser

when you need to host it use something like

python SimpleHTTP server

then maybe move to sinatra 

then maybe move to rails (the total code weight will increase drastically in this phase &#x1F600; )

--- 

then tear down some defaults (you usually don't need all actioncontroller 

also see one file rails app and one file rails app and the talk by jose - railsnatra http://www.confreaks.com/videos/2442-railsconf2013-you-ve-got-a-sinatra-on-your-rails )

---

when choosing a library

some things are important:

size (number of lines) 
code quality
test coverage
require time (something that most people ignore, this impacts both development and testing time)

---

I've gone / I'm pushing it  to the extreme just to see when it's useful and when it's not

see where is your limit

try to go beyond that and to see if you benefit from it


to see wich library/technology to try and how to try it

search the library author name
find a talk about his library

---

code

:: notes: these are presenter notes
:: layout it's just a class

[layout mini] 
[font thaoma]
[color red]


---

Thanks!

questions?

---

Thanks!

questions?


rubies 3d printed @ LTE Studio 


---

h1. icons

&#x1F30D; hello world

&#9200;
&#9203;
&#9995; stop
&#9989; check

&#10024; magic
&#x1F52E;

&#10060; cross

&#11088; star

&#x1F680; rocket

rails
&#x1F682;
&#x1F683;
&#x1F684;

&#x1F3A9; magic1

&#x1F3AF; target

&#x1F3B2; dice

&#x1F37A; beer

&#x1F6A6; traffic light

&#x1F6B6; walk 

&#x1F6BD; wc

&#x1F64B; questions

&#x1F648;
&#x1F64A;
&#x1F649;

&#x1F446; pregunta

&#x1F449; point right
&#x1F448;	 point left

&#x1F44C; perfect
&#x1F44D; thumbs up
&#x1F44E; thumbs down
&#x1F453; nerd

&#x1F47D;	 alien

&#x1F48A; pill

&#x1F4A3; bomb

&#x1F4AA; flex

&#x1F4A9; poo

&#x1F4B0; profit
&#x1F4C8;

&#x1F4C9;	chart down

&#x1F4CC;	 pushpin
&#x1F4D4; notebook
&#x1F4DD;

&#x1F514;	bell

&#x1F512; security
&#x1F513; open

&#x1F525; fire

&#x1F600; happy
&#x1F605;	sweat
&#x1F613;	sweat sad

&#x1F60E; sunglasses

&#x1F620; angry
&#x1F628; fear
&#x1F631; more fear

&#x1F3C1; finish

&#x1F3E0; home

&#x1F422; turtle
&#x1F407; rabbit
&#x1F40E;	 horse

&#x1F19A; VS

http://www.utf8-chartable.de/unicode-utf8-table.pl?start=128512&number=1024&utf8=-&unicodeinhtml=hex

